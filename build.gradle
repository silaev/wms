buildscript {
    ext {
        springBootVersion = '2.1.6.RELEASE'
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id "io.franzbecker.gradle-lombok" version "3.1.0"
    id 'com.sourcemuse.mongo' version '1.0.7'
    id 'jacoco'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.silaev.wms'
version = '0.0.5-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

springBoot {
    mainClassName = 'com.silaev.wms.WmsApplication'
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
    implementation('org.springframework.boot:spring-boot-starter-validation')
    implementation('org.springframework.boot:spring-boot-starter-webflux')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.bouncycastle:bcprov-jdk15on:1.60')
    implementation('org.apache.poi:poi-ooxml:4.0.0')
    implementation('commons-io:commons-io:2.6')

    runtimeOnly('org.springframework.boot:spring-boot-devtools')

    testImplementation('org.springframework.boot:spring-boot-starter-test'){
        exclude group: 'junit', module: 'junit'
    }
    testImplementation('io.projectreactor:reactor-test')
    testImplementation('org.springframework.security:spring-security-test')

    testCompile('org.junit.jupiter:junit-jupiter-params:5.3.1')
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.3.1')

    testCompile('org.mockito:mockito-junit-jupiter:2.23.0')

    //compile group: 'io.projectreactor.tools', name: 'blockhound-junit-platform', version: '1.0.0.M4'
    //testRuntime group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.4.2'
    //compile group: 'io.projectreactor.tools', name: 'blockhound', version: '1.0.0.M4'
    //compile 'io.projectreactor:reactor-tools:3.3.0.M2'
    //compile group: 'org.testcontainers', name: 'testcontainers', version: '1.11.3'
    //compile group: 'com.vladmihalcea', name: 'db-testutil', version: '0.0.1'
}

tasks.withType(Test) { Test task ->
    task.useJUnitPlatform {

    }

    task.systemProperties(
            System.properties.findAll {
                it.key.toString().startsWith("spring")
            }
    )
    println("Test sys props: " + task.systemProperties)


    task.maxParallelForks = 2
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'

    finalizedBy jacocoTestReport
}

wrapper{
    gradleVersion = '5.4.1'
    distributionType = Wrapper.DistributionType.BIN
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true

        xml.destination file("${buildDir}/reports/jacoco/report.xml")
    }

    afterEvaluate {
        afterEvaluate {
            classDirectories.setFrom(
                    files(
                            classDirectories.files.collect {
                                fileTree(dir: it, exclude:
                                        [
                                                'com/silaev/wms/entity/**',
                                                'com/silaev/wms/dto/**',
                                                'com/silaev/wms/config/**',
                                                'com/silaev/wms/exception/**',
                                                'com/silaev/wms/model'
                                        ]
                                )
                            }
                    )
            )
        }
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.8
            }
        }
    }

    afterEvaluate {
        afterEvaluate {
            classDirectories.setFrom(
                    files(
                            classDirectories.files.collect {
                                fileTree(dir: it, exclude:
                                        [
                                                'com/silaev/wms/entity/**',
                                                'com/silaev/wms/dto/**',
                                                'com/silaev/wms/config/**',
                                                'com/silaev/wms/exception/**',
                                                'com/silaev/wms/model'
                                        ]
                                )
                            }
                    )
            )
        }
    }
}

check.dependsOn jacocoTestCoverageVerification